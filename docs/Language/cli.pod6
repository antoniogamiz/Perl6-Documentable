=begin pod :kind("Language") :subkind("Language") :category("setup")

=TITLE Command line interface

=SUBTITLE Using Perl6::Documentable from the CLI

C<Perl6::Documentable> provides you with a easy-to-use CLI application. This is useful
if you only want to generate the static files as serve them with C<nginx> or similars.

It has a lot of options to let you customize the generation process as much as you want.
Let's see what's available.

=head1 Options

=head2 X<documentable setup>

This will download a bunch of files in your current working directory. You can check those
files L<here|https://github.com/antoniogamiz/Perl6-Documentable/releases/tag/v1.1.2>.

B<You do not need to use these exact files>. You can modify them as you want, except for the files
under C<template> dir.

=head2 X<documentable start>

This will start the HTML generation process. See the parameters below to customize it.

=head2 X<documentable update>

This one is very importante. It will update your HTML collection B<without> regenereting each and
every file.

=head2 X<documentable clean>

This will delete the directories and files generated by C<documentable setup>.

=head1 Parameters

=head2 X<--topdir=<Str>>

Root directory where all your documentation is stored.

B<Default:> C<"doc">.

=head2 X<--conf=<Str>>

Path to the configuration file (see L<configuration-file|/Language/configuration-file>).

If a file called C<"config.json"> is not found at the same directory where C<Perl6::Documentable>
was called, the L<default config file|https://github.com/antoniogamiz/Perl6-Documentable/blob/master/resources/config.json>
will be used instead.

B<Default:> C<"config.json">.

=head2 X<-v, --verbose>

It C<True>, progress information will be displayed.

B<Default:> C<False>.

=head2 X<-c, --cache>

If C<True>, L<Pod::To::Cached|https://github.com/finanalyst/pod-cached> will be used to load
the pods and create a cache. B<Recommended>.

B<Default:> C<True>.

=head2 X<-p, --primary>

If C<True>, HTML files associated with L<Perl6::Documentable::Primary|/type/Perl6::Documentable::Primary>
objects will be generated. That means, all your collection will be mapped to HTML, generating one
HTML file by each pod block found.

B<Default:> C<False>.

=head2 X<-s, --secondary>

If C<True>, HTML files associated with L<Perl6::Documentable::Secondary|/type/Perl6::Documentable::Secondary>
objects will be generated. Those files comes from grouping those objects by name.

B<Default:> C<False>.

=head2 X<--search-index>

If C<True>, a search index will be generated to enable search capabilities in the site.

B<Default:> C<False>.

=head2 X<-i, --indexes>

If C<True>, index pages will be generated to group all HTML pages by L<Kind|/type/Kind>s and
categories. See L<configuration-file|/Language/configuration-file>.

B<Default:> C<False>.

=head2 X<-t, --typegraph>

If C<True>, TypeGraph representations will be generated. See L<typegraph|/language/typegraph>.

The representations will be cached when possible.

B<Default:> C<False>.

=head2 X<-f, --force>

If C<True>, TypeGraph representations will be always generated. See L<typegraph|/language/typegraph>.

B<Default:> C<False>.

=head2 X<--highlight>

If C<True>, C<block codes> will be highlighted. See L<highlighting|/language/highlighting>.

B<Default:> C<False>.

=head2 X<--typegraph-file=<Str>>

Path to the TypeGraph file. See L<typegraph|/language/typegraph>.

B<Default:> C<"type-graph.txt">.

=head2 X<--highlight-path=<Str>>

Path to the directory containing the highlighter files. B<Internal use>.

B<Default:> C<"./highlights">.

=head2 X<--dirs=<Str>>

Comma sepparated values to specify the directories where C<Perl6::Documentable> will look for
documentation. Example: "--dirs=Language,Type".

B<Default:> C<DOCUMENTABLE-DIRS>.

=head2 X<-a, --all>

Equivalent to specify C<-t -p -s -i --search-index>

B<Default:> C<DOCUMENTABLE-DIRS>.

=head1 Examples


Suppose you only want to process your pod collection to check the syntax in
you pod files. You only to execute:

=begin code
documentable start
=end code

Or maybe you only want to generate the primary files:

=begin code
documentable start -p
=end code

Or the search index:

=begin code
documentable start --search-index
=end code

And what if I have a different doc structure? For instance:

=begin code :lang<text>
documentation
└── Potatoes
    ├── Potato1.pm6
└── Carrots
    ├── Carrot1.pm6
=end code

You only need to specify the correct dirs to C<Perl6::Documentable>:

=begin code
documentable start --topdir=documentation --dirs=Potatoes,Carrots
=end code

The command used to generated the documentation for C<Perl6::Documentable> is:

=begin code
documentable start --topdir=docs -v -a --highlight --highlight-path="/highlights"
=end code

=end pod